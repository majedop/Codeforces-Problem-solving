// https://codeforces.com/problemset/problem/25/D
#include <bits/stdc++.h>
using namespace std;

int par[1005];
int group_size[1005];

void dsu_init(int n)
{
    for (int i = 1; i <= n; i++)
    {
        par[i] = -1;
        group_size[i] = 1;
    }
}

int find(int node)
{
    if (par[node] == -1)
        return node;

    int leader = find(par[node]);
    par[node] = leader;
    return leader;
}

void dsu_union(int node1, int node2)
{
    int leader_A = find(node1);
    int leader_B = find(node2);

    if(leader_A == leader_B)
    return;

    if (group_size[leader_A] >= group_size[leader_B])
    {
        par[leader_B] = leader_A;
        group_size[leader_A] += group_size[leader_B];
    }
    else
    {
        par[leader_A] = leader_B;
        group_size[leader_B] += group_size[leader_A];
    }
}
int main()
{
    int n;
    cin >> n;
    dsu_init(n);
    vector<pair<int, int>> rmv;
    vector<pair<int,int>> crt;

    for (int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin >> a >> b;
        int leader_A = find(a);
        int leader_B = find(b);

        if (leader_A == leader_B)
            rmv.push_back({a, b});
        else
            dsu_union(a, b);
    }

    for(int i = 2; i<=n; i++)
    {
        int leader_1 = find(1);
        int leader_i = find(i);
        if(leader_1 != leader_i)
        {
            crt.push_back({1,i});
            dsu_union(1, i);
        }
    }

    int sz = rmv.size();
    cout << sz << "\n";
    for(int i = 0; i< sz; i++)
    cout << rmv[i].first << " " << rmv[i].second << " " << crt[i].first << " " << crt[i].second <<"\n";
    
    

    return 0;
}
